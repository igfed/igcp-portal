public class DTO_AccountDetail {
	@AuraEnabled public String clientBpid;
	@AuraEnabled public String clientNumber;
	@AuraEnabled public String accountNumber;
	@AuraEnabled public String consultantNumber;
	@AuraEnabled public String accountType;
	@AuraEnabled public String accountTypeLabel;
	@AuraEnabled public String registrationType;
	@AuraEnabled public String dealerNumber;
	@AuraEnabled public String dealerName;
	@AuraEnabled public String sourceSystem;
	@AuraEnabled public String reportingDate;
	@AuraEnabled public String asOfDate;
	@AuraEnabled public String balanceDate;
	@AuraEnabled public String purchaseDate;
	@AuraEnabled public String marketValueCad;
	@AuraEnabled public String bookCostCad;
	@AuraEnabled public String gainLossCad;
	@AuraEnabled public String netContributions;
	@AuraEnabled public String totalContributedAmount;
	@AuraEnabled public String totalRedeemedAmount;
	@AuraEnabled public String totalDistributedAmount;
	@AuraEnabled public String totalReinvestedAmount;
	@AuraEnabled public String netContributionsYtd;
	@AuraEnabled public String netWithdrawalsYtd;
	@AuraEnabled public String netTransfersInYtd;
	@AuraEnabled public String netTransfersOutYtd;
	@AuraEnabled public String netContributionsInception;
	@AuraEnabled public String netWithdrawalsInception;
	@AuraEnabled public String netTransfersInInception;
	@AuraEnabled public String netTransfersOutInception;
	@AuraEnabled public String beneficiaryNames;
	@AuraEnabled public String iprofileModelNumber;
	@AuraEnabled public String currencyCd;

	public DTO_AccountDetail(IGAccountDetailClient.AccountDetail source) {
		this.clientBpid 				= source.CLIENT_BPID;
		this.clientNumber 				= source.CLIENT_NUMBER;
		this.accountNumber 				= source.ACCOUNT_NUMBER;
		this.consultantNumber 			= source.CONSULTANT_NUMBER;
		this.accountType 				= source.ACCOUNT_TYPE;
		this.accountTypeLabel 			= source.ACCOUNT_TYPE_LABEL;
		this.registrationType 			= source.REGISTRATION_TYPE;
		this.dealerNumber 				= source.DEALER_NUMBER;
		this.dealerName 				= source.DEALER_NAME;
		this.sourceSystem 				= source.SOURCE_SYSTEM;
		this.reportingDate 				= String.isNotBlank(source.REPORTING_DATE) 					? source.REPORTING_DATE 				: MockDataUtils.getMockAccountDetailsData('REPORTING_DATE');
		this.asOfDate 					= String.isNotBlank(source.AS_OF_DATE) 						? source.AS_OF_DATE						: MockDataUtils.getMockAccountDetailsData('AS_OF_DATE');
		this.balanceDate 				= String.isNotBlank(source.BALANCE_DATE) 					? source.BALANCE_DATE					: MockDataUtils.getMockAccountDetailsData('BALANCE_DATE');
		this.purchaseDate 				= String.isNotBlank(source.PURCHASE_DATE) 					? source.PURCHASE_DATE					: MockDataUtils.getMockAccountDetailsData('PURCHASE_DATE');
		this.marketValueCad 			= String.isNotBlank(source.MARKET_VALUE_CAD) 				? source.MARKET_VALUE_CAD				: MockDataUtils.getMockAccountDetailsData('MARKET_VALUE_CAD');
		this.bookCostCad 				= String.isNotBlank(source.BOOK_COST_CAD) 					? source.BOOK_COST_CAD					: MockDataUtils.getMockAccountDetailsData('BOOK_COST_CAD');
		this.gainLossCad 				= String.isNotBlank(source.GAIN_LOSS_CAD) 					? source.GAIN_LOSS_CAD					: MockDataUtils.getMockAccountDetailsData('GAIN_LOSS_CAD');
		this.netContributions 			= String.isNotBlank(source.NET_CONTRIBUTIONS) 				? source.NET_CONTRIBUTIONS 				: MockDataUtils.getMockAccountDetailsData('NET_CONTRIBUTIONS');
		this.totalContributedAmount 	= String.isNotBlank(source.TOTAL_CONTRIBUTED_AMOUNT) 		? source.TOTAL_CONTRIBUTED_AMOUNT		: MockDataUtils.getMockAccountDetailsData('TOTAL_CONTRIBUTED_AMOUNT');
		this.totalRedeemedAmount 		= String.isNotBlank(source.TOTAL_REDEEMED_AMOUNT) 			? source.TOTAL_REDEEMED_AMOUNT			: MockDataUtils.getMockAccountDetailsData('TOTAL_REDEEMED_AMOUNT');
		this.totalDistributedAmount 	= String.isNotBlank(source.TOTAL_DISTRIBUTED_AMOUNT) 		? source.TOTAL_DISTRIBUTED_AMOUNT		: MockDataUtils.getMockAccountDetailsData('TOTAL_DISTRIBUTED_AMOUNT');
		this.totalReinvestedAmount 		= String.isNotBlank(source.TOTAL_REINVESTED_AMOUNT) 		? source.TOTAL_REINVESTED_AMOUNT		: MockDataUtils.getMockAccountDetailsData('TOTAL_REINVESTED_AMOUNT');
		this.netContributionsYtd 		= String.isNotBlank(source.NET_CONTRIBUTIONS_YTD) 			? source.NET_CONTRIBUTIONS_YTD			: MockDataUtils.getMockAccountDetailsData('NET_CONTRIBUTIONS_YTD');
		this.netWithdrawalsYtd 			= String.isNotBlank(source.NET_WITHDRAWALS_YTD) 			? source.NET_WITHDRAWALS_YTD			: MockDataUtils.getMockAccountDetailsData('NET_WITHDRAWALS_YTD');
		this.netTransfersInYtd 			= String.isNotBlank(source.NET_TRANSFERS_IN_YTD) 			? source.NET_TRANSFERS_IN_YTD			: MockDataUtils.getMockAccountDetailsData('NET_TRANSFERS_IN_YTD');
		this.netTransfersOutYtd 		= String.isNotBlank(source.NET_TRANSFERS_OUT_YTD) 			? source.NET_TRANSFERS_OUT_YTD			: MockDataUtils.getMockAccountDetailsData('NET_TRANSFERS_OUT_YTD');
		this.netContributionsInception 	= String.isNotBlank(source.NET_CONTRIBUTIONS_INCEPTION) 	? source.NET_CONTRIBUTIONS_INCEPTION	: MockDataUtils.getMockAccountDetailsData('NET_CONTRIBUTIONS_INCEPTION');
		this.netWithdrawalsInception 	= String.isNotBlank(source.NET_WITHDRAWALS_INCEPTION) 		? source.NET_WITHDRAWALS_INCEPTION		: MockDataUtils.getMockAccountDetailsData('NET_WITHDRAWALS_INCEPTION');
		this.netTransfersInInception 	= String.isNotBlank(source.NET_TRANSFERS_IN_INCEPTION) 		? source.NET_TRANSFERS_IN_INCEPTION		: MockDataUtils.getMockAccountDetailsData('NET_TRANSFERS_IN_INCEPTION');
		this.netTransfersOutInception 	= String.isNotBlank(source.NET_TRANSFERS_OUT_INCEPTION) 	? source.NET_TRANSFERS_OUT_INCEPTION	: MockDataUtils.getMockAccountDetailsData('NET_TRANSFERS_OUT_INCEPTION');
		this.beneficiaryNames 			= String.isNotBlank(source.BENEFICIARY_NAMES) 				? source.BENEFICIARY_NAMES				: MockDataUtils.getMockAccountDetailsData('BENEFICIARY_NAMES');
		this.iprofileModelNumber 		= String.isNotBlank(source.IPROFILE_MODEL_NUMBER) 			? source.IPROFILE_MODEL_NUMBER			: MockDataUtils.getMockAccountDetailsData('IPROFILE_MODEL_NUMBER');
		this.currencyCd 				= String.isNotBlank(source.CURRENCY_X) 						? source.CURRENCY_X						: MockDataUtils.getMockAccountDetailsData('CURRENCY_X');	
	}
}